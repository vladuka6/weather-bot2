import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import requests
import sqlite3
from datetime import datetime, time
import os
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
import matplotlib.pyplot as plt
import io
import base64

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
scheduler = BackgroundScheduler()
scheduler.start()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OpenWeatherMap API
API_KEY = os.getenv("OPENWEATHER_API_KEY", "your_openweather_api_key")
WEATHER_URL = "http://api.openweathermap.org/data/2.5/weather"
FORECAST_URL = "http://api.openweathermap.org/data/2.5/forecast"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
def init_db():
    conn = sqlite3.connect("/app/data/weather_bot.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS requests
                 (user_id INTEGER, city TEXT, request_type TEXT, timestamp TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS favorite_cities
                 (user_id INTEGER, city TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS notifications
                 (user_id INTEGER, notify_time TEXT, UNIQUE(user_id, notify_time))''')
    c.execute('''CREATE TABLE IF NOT EXISTS alerts
                 (user_id INTEGER, enabled INTEGER, UNIQUE(user_id))''')
    conn.commit()
    conn.close()

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É
def save_request(user_id, city, request_type):
    conn = sqlite3.connect("/app/data/weather_bot.db")
    c = conn.cursor()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    c.execute("INSERT INTO requests (user_id, city, request_type, timestamp) VALUES (?, ?, ?, ?)",
              (user_id, city, request_type, timestamp))
    conn.commit()
    conn.close()

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É–ª—é–±–ª–µ–Ω–æ–≥–æ –º—ñ—Å—Ç–∞
def save_favorite_city(user_id, city):
    conn = sqlite3.connect("/app/data/weather_bot.db")
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO favorite_cities (user_id, city) VALUES (?, ?)", (user_id, city))
    conn.commit()
    conn.close()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —É–ª—é–±–ª–µ–Ω–∏—Ö –º—ñ—Å—Ç
def get_favorite_cities(user_id):
    conn = sqlite3.connect("/app/data/weather_bot.db")
    c = conn.cursor()
    c.execute("SELECT city FROM favorite_cities WHERE user_id = ?", (user_id,))
    cities = [row[0] for row in c.fetchall()]
    conn.close()
    return cities

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –æ–ø–æ–≤—ñ—â–µ–Ω—å
def save_notification_time(user_id, notify_time):
    conn = sqlite3.connect("/app/data/weather_bot.db")
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO notifications (user_id, notify_time) VALUES (?, ?)",
              (user_id, notify_time))
    conn.commit()
    conn.close()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Å—É –æ–ø–æ–≤—ñ—â–µ–Ω—å
def get_notification_times(user_id):
    conn = sqlite3.connect("/app/data/weather_bot.db")
    c = conn.cursor()
    c.execute("SELECT notify_time FROM notifications WHERE user_id = ?", (user_id,))
    times = [row[0] for row in c.fetchall()]
    conn.close()
    return times

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–ø–æ–≤—ñ—â–µ–Ω—å
def delete_notifications(user_id):
    conn = sqlite3.connect("/app/data/weather_bot.db")
    c = conn.cursor()
    c.execute("DELETE FROM notifications WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É –ø–æ–≥–æ–¥—É
def save_alert_setting(user_id, enabled):
    conn = sqlite3.connect("/app/data/weather_bot.db")
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO alerts (user_id, enabled) VALUES (?, ?)", (user_id, enabled))
    conn.commit()
    conn.close()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–ø–∏—Ç—ñ–≤
def get_history(user_id, limit=5):
    conn = sqlite3.connect("/app/data/weather_bot.db")
    c = conn.cursor()
    c.execute("SELECT city, request_type, timestamp FROM requests WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?",
              (user_id, limit))
    history = c.fetchall()
    conn.close()
    return history

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏
def get_current_weather(city):
    try:
        params = {"q": city, "appid": API_KEY, "units": "metric", "lang": "uk"}
        response = requests.get(WEATHER_URL, params=params)
        response.raise_for_status()
        data = response.json()
        temp = data["main"]["temp"]
        temp_min = data["main"]["temp_min"]
        temp_max = data["main"]["temp_max"]
        humidity = data["main"]["humidity"]
        wind = data["wind"]["speed"]
        description = data["weather"][0]["description"]
        weather_emoji = get_weather_emoji(description)
        advice = get_weather_advice(description, temp, wind, humidity)
        tip = get_daily_tip(description, temp, wind)
        uv_index = 0
        uv_advice = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        return (f"üìç –ü–æ–≥–æ–¥–∞ –≤ {city} üåü:\n"
                f"{weather_emoji} ‚Ä¢ {description.title()}\n"
                f"üå°Ô∏è ‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.2f}¬∞C (–º—ñ–Ω: {temp_min:.2f}¬∞C, –º–∞–∫—Å: {temp_max:.2f}¬∞C) {get_temp_emoji(temp)}\n"
                f"üíß ‚Ä¢ –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}% üí¶\n"
                f"üí® ‚Ä¢ –í—ñ—Ç–µ—Ä: {wind} –º/—Å {get_wind_emoji(wind)}\n"
                f"‚òÄÔ∏è ‚Ä¢ UV-—ñ–Ω–¥–µ–∫—Å: {uv_index:.1f} ({uv_advice})\n\n"
                f"{advice}\n{tip}")
    except requests.RequestException:
        return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è {city}."

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ 5 –¥–Ω—ñ–≤
def get_forecast(city):
    try:
        params = {"q": city, "appid": API_KEY, "units": "metric", "lang": "uk"}
        response = requests.get(FORECAST_URL, params=params)
        response.raise_for_status()
        data = response.json()
        forecast = []
        temps = []
        dates = []
        rainy_days = 0
        for item in data["list"][::8]:
            date = item["dt_txt"].split()[0]
            temp = item["main"]["temp"]
            temp_min = item["main"]["temp_min"]
            temp_max = item["main"]["temp_max"]
            humidity = item["main"]["humidity"]
            wind = item["wind"]["speed"]
            description = item["weather"][0]["description"]
            weather_emoji = get_weather_emoji(description)
            tip = get_daily_tip(description, temp, wind)
            if "–¥–æ—â" in description.lower():
                rainy_days += 1
            forecast.append(
                f"üìç {date} üóìÔ∏è\n"
                f"{weather_emoji} ‚Ä¢ {description.title()}\n"
                f"üå°Ô∏è ‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.2f}¬∞C (–º—ñ–Ω: {temp_min:.2f}¬∞C, –º–∞–∫—Å: {temp_max:.2f}¬∞C) {get_temp_emoji(temp)}\n"
                f"üíß ‚Ä¢ –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}% üí¶\n"
                f"üí® ‚Ä¢ –í—ñ—Ç–µ—Ä: {wind} –º/—Å {get_wind_emoji(wind)}\n"
                f"üí° ‚Ä¢ –ü–æ—Ä–∞–¥–∞: {tip}\n"
            )
            temps.append(temp)
            dates.append(date[-5:])
        conclusion = f"–í–∏—Å–Ω–æ–≤–æ–∫ –¥–ª—è {city}: "
        if rainy_days > 0:
            conclusion += (f"–¢–µ–ø–ª–∏–π —Ç–∏–∂–¥–µ–Ω—å, –∞–ª–µ —á–µ–∫–∞–π –Ω–∞ {rainy_days} –¥–æ—â–æ–≤–∏—Ö –¥–Ω—ñ–≤ üåßÔ∏è. "
                          f"–¢—Ä–∏–º–∞–π –ø–∞—Ä–∞—Å–æ–ª—å–∫—É –Ω–∞–ø–æ–≥–æ—Ç–æ–≤—ñ! ‚òÇÔ∏è")
        else:
            conclusion += "–¢–µ–ø–ª–∏–π —ñ –ø—Ä–∏—î–º–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å! üåû –Ü–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–≥—É–ª—è–Ω–æ–∫ üö∂‚Äç‚ôÄÔ∏è —ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É üö¥‚Äç‚ôÄÔ∏è."
        chart = get_temperature_chart(dates, temps, city)
        return (f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ 5 –¥–Ω—ñ–≤ —É {city} üåü:\n\n" + "\n".join(forecast) + f"\n{conclusion}", chart)
    except requests.RequestException:
        return (f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city}.", None)

# –ï–º–æ–¥–∑—ñ –¥–ª—è –ø–æ–≥–æ–¥–∏
def get_weather_emoji(description):
    description = description.lower()
    if "–¥–æ—â" in description:
        return "üå¶Ô∏è"
    elif "—Ö–º–∞—Ä" in description:
        return "‚òÅÔ∏è"
    elif "—è—Å–Ω–æ" in description or "—á–∏—Å—Ç–µ" in description:
        return "‚òÄÔ∏è"
    return "üå§Ô∏è"

# –ï–º–æ–¥–∑—ñ –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
def get_temp_emoji(temp):
    if temp < 5:
        return "‚ùÑÔ∏è"
    elif temp < 20:
        return "üòé"
    return "üî•"

# –ï–º–æ–¥–∑—ñ –¥–ª—è –≤—ñ—Ç—Ä—É
def get_wind_emoji(wind):
    if wind > 10:
        return "üå™Ô∏è"
    elif wind > 5:
        return "üå¨Ô∏è"
    return "üçÉ"

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –æ–¥—è–≥—É
def get_weather_advice(description, temp, wind, humidity):
    description = description.lower()
    if "–¥–æ—â" in description:
        return "–í—ñ–∑—å–º—ñ—Ç—å –ø–∞—Ä–∞—Å–æ–ª—é —Ç–∞ –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏–∫–Ω–∏–π –æ–¥—è–≥ ‚òÇÔ∏è"
    elif temp < 5 or wind > 10:
        return "–û–¥—è–≥–Ω—ñ—Ç—å —Ç–µ–ø–ª–∏–π –æ–¥—è–≥, —à–∞–ø–∫—É —Ç–∞ —Ä—É–∫–∞–≤–∏—á–∫–∏ üß•üß§"
    elif temp > 25 and humidity < 50:
        return "–õ–µ–≥–∫–∏–π –æ–¥—è–≥ —ñ —Å–æ–Ω—Ü–µ–∑–∞—Ö–∏—Å–Ω–∏–π –∫—Ä–µ–º üòéüß¥"
    return "–û–¥—è–≥–∞–π—Ç–µ—Å—è –∑—Ä—É—á–Ω–æ üëï"

# –ü–æ—Ä–∞–¥–∞ –¥–Ω—è
def get_daily_tip(description, temp, wind):
    description = description.lower()
    if "–¥–æ—â" in description or wind > 10:
        return "–ó–∞–ª–∏—à–∞–π—Ç–µ—Å—è –≤–¥–æ–º–∞ –∑ –∫–Ω–∏–≥–æ—é –∞–±–æ —Ñ—ñ–ª—å–º–æ–º üìöüé¨"
    elif temp > 20 and "—è—Å–Ω–æ" in description:
        return "–Ü–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø—ñ–∫–Ω—ñ–∫–∞ –∞–±–æ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏ –≤ –ø–∞—Ä–∫—É! üß∫üå≥"
    elif temp < 5:
        return "–ß–∞—Å –¥–ª—è –≥–∞—Ä—è—á–æ–≥–æ —á–∞—é —Ç–∞ —Ç–µ–ø–ª–æ—ó –∫–æ–≤–¥—Ä–∏ ‚òïüõãÔ∏è"
    return "–ß—É–¥–æ–≤–∏–π –¥–µ–Ω—å –¥–ª—è –±—É–¥—å-—è–∫–∏—Ö –ø–ª–∞–Ω—ñ–≤! üòä"

# –ì—Ä–∞—Ñ—ñ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
def get_temperature_chart(dates, temps, city):
    plt.figure(figsize=(8, 4))
    plt.plot(dates, temps, marker='o', color='#3498db', label=f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city} (¬∞C)')
    plt.fill_between(dates, temps, color='rgba(52, 152, 219, 0.2)')
    plt.title(f'–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ –≤ {city}')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
    plt.legend()
    plt.grid(True)
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close()
    
    img_base64 = base64.b64encode(buf.getvalue()).decode('utf-8')
    return img_base64

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–ø–æ–≤—ñ—â–µ–Ω—å
async def send_notification(context: ContextTypes.DEFAULT_TYPE, user_id, bot):
    cities = get_favorite_cities(user_id)
    if not cities:
        await bot.send_message(user_id, "–î–æ–¥–∞–π—Ç–µ —É–ª—é–±–ª–µ–Ω—ñ –º—ñ—Å—Ç–∞ —á–µ—Ä–µ–∑ '–¥–æ–¥–∞—Ç–∏ <–º—ñ—Å—Ç–æ>'.")
        return
    for city in cities:
        weather = get_current_weather(city)
        await bot.send_message(user_id, weather)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ—ó –ø–æ–≥–æ–¥–∏
async def check_extreme_weather(context: ContextTypes.DEFAULT_TYPE, user_id, bot):
    conn = sqlite3.connect("/app/data/weather_bot.db")
    c = conn.cursor()
    c.execute("SELECT enabled FROM alerts WHERE user_id = ?", (user_id,))
    enabled = c.fetchone()
    if not enabled or not enabled[0]:
        return
    cities = get_favorite_cities(user_id)
    for city in cities:
        params = {"q": city, "appid": API_KEY, "units": "metric", "lang": "uk"}
        try:
            response = requests.get(WEATHER_URL, params=params)
            response.raise_for_status()
            data = response.json()
            temp = data["main"]["temp"]
            description = data["weather"][0]["description"].lower()
            if temp > 30 or temp < -10 or "—Å–∏–ª—å–Ω–∏–π –¥–æ—â" in description or "—à—Ç–æ—Ä–º" in description:
                await bot.send_message(user_id, f"‚ö†Ô∏è –£–≤–∞–≥–∞! –ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞ –ø–æ–≥–æ–¥–∞ –≤ {city}: {temp}¬∞C, {description}.")
        except requests.RequestException:
            pass

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ø—Ä–æ–≥–Ω–æ–∑—É
def get_weather_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ü–æ–≥–æ–¥–∞ –∑–∞—Ä–∞–∑", callback_data="current")],
        [InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤", callback_data="forecast")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —É–ª—é–±–ª–µ–Ω–∏—Ö –º—ñ—Å—Ç
def get_favorite_cities_keyboard(user_id):
    cities = get_favorite_cities(user_id)
    if not cities:
        return None
    keyboard = [[InlineKeyboardButton(city, callback_data=f"city_{city}")] for city in cities]
    keyboard.append([InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="manual")])
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–æ–±–∫–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    keyboard = get_favorite_cities_keyboard(user_id)
    if keyboard:
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å —É–ª—é–±–ª–µ–Ω–µ –º—ñ—Å—Ç–æ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ (—á–µ—Ä–µ–∑ –∫–æ–º—É):",
            reply_markup=keyboard
        )
    else:
        await update.message.reply_text(
            "–í–≤–µ–¥—ñ—Ç—å –æ–¥–Ω–µ –∞–±–æ –∫—ñ–ª—å–∫–∞ –º—ñ—Å—Ç —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ö–∏—ó–≤, –û—Ö—Ç–∏—Ä–∫–∞).\n"
            "–ö–æ–º–∞–Ω–¥–∏:\n"
            "/notify <—á–∞—Å> ‚Äì —É–≤—ñ–º–∫–Ω—É—Ç–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, /notify 15:00, 18:15)\n"
            "/stopnotify ‚Äì –≤–∏–º–∫–Ω—É—Ç–∏ –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n"
            "/history ‚Äì –æ—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–ø–∏—Ç—ñ–≤\n"
            "/alert on/off ‚Äì —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É –ø–æ–≥–æ–¥—É\n"
            "–¥–æ–¥–∞—Ç–∏ <–º—ñ—Å—Ç–æ> ‚Äì –¥–æ–¥–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω–µ –º—ñ—Å—Ç–æ\n"
            "—É–ª—é–±–ª–µ–Ω—ñ ‚Äì —Å–ø–∏—Å–æ–∫ —É–ª—é–±–ª–µ–Ω–∏—Ö –º—ñ—Å—Ç\n"
            "/compare <–º—ñ—Å—Ç–æ1, –º—ñ—Å—Ç–æ2> ‚Äì –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ –ø–æ–≥–æ–¥—É"
        )

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    if text.startswith("–¥–æ–¥–∞—Ç–∏ "):
        city = text[7:].strip().title()
        save_favorite_city(user_id, city)
        await update.message.reply_text(f"–ú—ñ—Å—Ç–æ {city} –¥–æ–¥–∞–Ω–æ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö!")
        return

    if text.lower() == "—É–ª—é–±–ª–µ–Ω—ñ":
        cities = get_favorite_cities(user_id)
        if cities:
            await update.message.reply_text(f"–í–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ –º—ñ—Å—Ç–∞: {', '.join(cities)}")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö –º—ñ—Å—Ç.")
        return

    cities = [city.strip().title() for city in text.split(",") if city.strip()]
    if not cities:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω–µ –º—ñ—Å—Ç–æ.")
        return

    context.user_data["cities"] = cities
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑—É:", reply_markup=get_weather_keyboard())  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "back":
        keyboard = get_favorite_cities_keyboard(user_id)
        if keyboard:
            await query.message.edit_text(
                "–û–±–µ—Ä—ñ—Ç—å —É–ª—é–±–ª–µ–Ω–µ –º—ñ—Å—Ç–æ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ (—á–µ—Ä–µ–∑ –∫–æ–º—É):",
                reply_markup=keyboard
            )
        else:
            await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –æ–¥–Ω–µ –∞–±–æ –∫—ñ–ª—å–∫–∞ –º—ñ—Å—Ç —á–µ—Ä–µ–∑ –∫–æ–º—É.")
        if "cities" in context.user_data:
            del context.user_data["cities"]
        return

    if query.data.startswith("city_"):
        city = query.data[5:]
        context.user_data["cities"] = [city]
        await query.message.edit_text(f"–û–±—Ä–∞–Ω–æ: {city}. –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑—É:", reply_markup=get_weather_keyboard())
        return

    if query.data == "manual":
        await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –æ–¥–Ω–µ –∞–±–æ –∫—ñ–ª—å–∫–∞ –º—ñ—Å—Ç —á–µ—Ä–µ–∑ –∫–æ–º—É.")
        return

    if "cities" not in context.user_data:
        await query.message.edit_text("–°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–∞.")
        return

    cities = context.user_data["cities"]
    for city in cities:
        if query.data == "current":
            result = get_current_weather(city)
            save_request(user_id, city, "current")
            await query.message.reply_text(result)
        elif query.data == "forecast":
            result, chart = get_forecast(city)
            save_request(user_id, city, "forecast")
            await query.message.reply_text(result)
            if chart:
                await query.message.reply_photo(photo=io.BytesIO(base64.b64decode(chart)))
    
    await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ –º—ñ—Å—Ç–∞ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è —ñ–Ω—à–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.")
    del context.user_data["cities"]

# –û–±—Ä–æ–±–∫–∞ /notify
async def notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    args = context.args
    if not args:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, /notify 15:00 –∞–±–æ /notify 15:00, 18:15")
        return

    times = [t.strip() for t in " ".join(args).split(",") if t.strip()]
    for t in times:
        try:
            hour, minute = map(int, t.split(":"))
            if not (0 <= hour <= 23 and 0 <= minute <= 59):
                raise ValueError
            notify_time = f"{hour:02d}:{minute:02d}"
            save_notification_time(user_id, notify_time)
            scheduler.add_job(
                send_notification,
                CronTrigger(hour=hour, minute=minute),
                args=[context, user_id, context.bot],
                id=f"notify_{user_id}_{notify_time}"
            )
            await update.message.reply_text(f"–û–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {notify_time}.")
        except ValueError:
            await update.message.reply_text(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É: {t}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ HH:MM.")

# –û–±—Ä–æ–±–∫–∞ /stopnotify
async def stop_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    times = get_notification_times(user_id)
    if not times:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ–ø–æ–≤—ñ—â–µ–Ω—å.")
        return
    for t in times:
        scheduler.remove_job(f"notify_{user_id}_{t}")
    delete_notifications(user_id)
    await update.message.reply_text("–û–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.")

# –û–±—Ä–æ–±–∫–∞ /history
async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    history = get_history(user_id)
    if not history:
        await update.message.reply_text("–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–ø–∏—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.")
        return
    response = "üìú –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç–∏:\n"
    for city, req_type, timestamp in history:
        response += f"{timestamp} - {city} ({'–∑–∞—Ä–∞–∑' if req_type == 'current' else '–ø—Ä–æ–≥–Ω–æ–∑'})\n"
    await update.message.reply_text(response)

# –û–±—Ä–æ–±–∫–∞ /alert
async def alert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if context.args and context.args[0].lower() == "on":
        save_alert_setting(user_id, 1)
        scheduler.add_job(
            check_extreme_weather,
            CronTrigger(hour="*/6"),
            args=[context, user_id, context.bot],
            id=f"alert_{user_id}"
        )
        await update.message.reply_text("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É –ø–æ–≥–æ–¥—É —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")
    elif context.args and context.args[0].lower() == "off":
        save_alert_setting(user_id, 0)
        try:
            scheduler.remove_job(f"alert_{user_id}")
        except:
            pass
        await update.message.reply_text("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É –ø–æ–≥–æ–¥—É –≤–∏–º–∫–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /alert on –∞–±–æ /alert off")

# –û–±—Ä–æ–±–∫–∞ /compare
async def compare(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    args = " ".join(context.args).split(",")
    cities = [city.strip().title() for city in args if city.strip()]
    if len(cities) != 2:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–≤–Ω–æ –¥–≤–∞ –º—ñ—Å—Ç–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /compare –ö–∏—ó–≤, –û—Ö—Ç–∏—Ä–∫–∞")
        return
    
    weather1 = get_current_weather(cities[0])
    weather2 = get_current_weather(cities[1])
    comparison = f"–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ–≥–æ–¥–∏:\n\n{weather1}\n\n{weather2}\n\n"
    
    try:
        params1 = {"q": cities[0], "appid": API_KEY, "units": "metric"}
        params2 = {"q": cities[1], "appid": API_KEY, "units": "metric"}
        temp1 = requests.get(WEATHER_URL, params=params1).json().get("main", {}).get("temp", 0)
        temp2 = requests.get(WEATHER_URL, params=params2).json().get("main", {}).get("temp", 0)
        
        if temp1 > temp2:
            comparison += f"–£ {cities[0]} —Ç–µ–ø–ª—ñ—à–µ! üåû"
        elif temp2 > temp1:
            comparison += f"–£ {cities[1]} —Ç–µ–ø–ª—ñ—à–µ! üåû"
        else:
            comparison += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–¥–Ω–∞–∫–æ–≤–∞! üòä"
    except:
        comparison += "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏."
    
    save_request(user_id, cities[0], "compare")
    save_request(user_id, cities[1], "compare")
    await update.message.reply_text(comparison)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
def load_scheduled_jobs(application):
    conn = sqlite3.connect("/app/data/weather_bot.db")
    c = conn.cursor()
    c.execute("SELECT user_id, notify_time FROM notifications")
    for user_id, notify_time in c.fetchall():
        hour, minute = map(int, notify_time.split(":"))
        scheduler.add_job(
            send_notification,
            CronTrigger(hour=hour, minute=minute),
            args=[None, user_id, application.bot],
            id=f"notify_{user_id}_{notify_time}"
        )
    c.execute("SELECT user_id FROM alerts WHERE enabled = 1")
    for (user_id,) in c.fetchall():
        scheduler.add_job(
            check_extreme_weather,
            CronTrigger(hour="*/6"),
            args=[None, user_id, application.bot],
            id=f"alert_{user_id}"
        )
    conn.close()

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    global application
    init_db()
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN", "your_telegram_bot_token")
    application = Application.builder().token(bot_token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("notify", notify))
    application.add_handler(CommandHandler("stopnotify", stop_notify))
    application.add_handler(CommandHandler("history", history))
    application.add_handler(CommandHandler("alert", alert))
    application.add_handler(CommandHandler("compare", compare))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_button))

    load_scheduled_jobs(application)

    webhook_url = os.getenv("WEBHOOK_URL", "https://your-render-service.onrender.com/webhook")
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 8443)),
        url_path="/webhook",
        webhook_url=webhook_url
    )

if __name__ == "__main__":
    main()